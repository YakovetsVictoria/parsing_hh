{"id":"76970692","premium":false,"billing_type":{"id":"standard","name":"Стандарт"},"relations":[],"name":"Data Engineer ( Управление \"Устройства самообслуживания\")","insider_interview":null,"response_letter_required":false,"area":{"id":"1","name":"Москва","url":"https://api.hh.ru/areas/1?host=hh.ru"},"salary":null,"type":{"id":"open","name":"Открытая"},"address":null,"allow_messages":true,"experience":{"id":"between3And6","name":"От 3 до 6 лет"},"schedule":{"id":"fullDay","name":"Полный день"},"employment":{"id":"full","name":"Полная занятость"},"department":{"id":"vtb-4181-rbiz","name":"ПАО ВТБ, Розничный бизнес"},"contacts":null,"description":"<strong>Обязанности:</strong> <ul> <li>анализ, проектирование и создание витрин данных в соответствии с требованиями конкретного проекта</li> <li>извлечение, очистка, загрузка и трансформация больших объемов данных из различных источников (тeradata, hadoop, плоские файлы), а также подготовка требований для разработки промышленных ETL-процессов</li> <li>контроль качества загружаемых данных, разработка автоматизированных инструментов для оценки качества данных</li> <li>анализ исходных данных в различных СУБД (тeradata, hadoop, postgresql) и форматах данных для решения бизнес-задач (оценка структуры, качества, полноты и применимости данных)</li> <li>совместно с DS и DA внедрение математических алгоритмов и ML-моделей в промышленные процессы</li> <li>предоставление экспертной поддержки внутренним потребителям (DS, DA) по вопросам, связанным с использованием данных.</li> </ul> <strong>Требования:</strong> <ul> <li>уверенное знание SQL: сложные запросы, аналитически функции, понимание физической реализации join’ов, оптимизация производительности запросов, хранимые процедуры и функции;</li> <li>знание Python на уровне переменных, процедур, функций, циклов, условных операторов;</li> <li>понимание ETL/ELT процессов, опыт работы с ETL-инструментами;</li> <li>понимание принципов организации хранилищ данных, подходов к проектированию логической и физической моделей, понимание основной проблематики хранилищ и подходов к решению;</li> <li>Jira, Confluence;</li> <li>развитые коммуникативные навыки, желание развиваться в области работы с данными;</li> <li>высшее, техническое либо финансовое образование.</li> </ul> <strong>Условия:</strong> <ul> <li>трудоустройство согласно Законодательству;</li> <li>конкурентная заработная плата;</li> <li>профессиональное обучение и развитие;</li> <li>добровольное медицинское страхование, льготные условия кредитования;</li> <li>корпоративная пенсионная программа, материальная помощь;</li> <li>спортивная жизнь и корпоративные мероприятия;</li> <li>возможность построить карьеру в ведущем банке России.</li> </ul>","branded_description":"\n<style>\n .hht-vacancydescription {\n  padding: 0 !important;\n}\n\n.vacancy-branded-user-content ul,\n.vacancy-branded-user-content ol {\n  margin-left: 0;\n}\n\n.vacancy-branded-user-content p {\n  margin-top: 0 !important;\n}\n\n.vacancy-branded-user-content p:first-child b,\n.vacancy-branded-user-content p:first-child strong {\n  margin-top: 0 !important;\n}\n\n.tmpl-hh-wrapper {\n  width: 100%;\n  margin: 0 auto;\n  max-width: 690px;\n  position: relative;\n  overflow: hidden;\n  font-family: \"Arial\", sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  color: #2F3441;\n  line-height: 1.4;\n}\n\n.tmpl-hh-wrapper * {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\n.tmpl-hh-wrapper sup {\n  vertical-align: top;\n}\n\n.tmpl-hh-wrapper .mb-43 {\n  margin-bottom: 43px !important;\n}\n\n.tmpl-hh-wrapper .mt-0 {\n  margin-top: -15px !important;\n}\n\n.tmpl-hh-content ol li p,\n.tmpl-hh-content ul li p {\n  margin: 0 !important;\n}\n\n.tmpl-hh-content ol li p b,\n.tmpl-hh-content ol li p strong,\n.tmpl-hh-content ul li p b,\n.tmpl-hh-content ul li p strong {\n  font-weight: 700;\n  font-size: inherit !important;\n  margin: 0 !important;\n  text-transform: none;\n  color: inherit !important;\n  display: initial;\n}\n\n.tmpl-hh-content ol li em,\n.tmpl-hh-content ul li em {\n  font-style: normal !important;\n}\n\n.tmpl-hh-content ol li em b,\n.tmpl-hh-content ol li em strong,\n.tmpl-hh-content ul li em b,\n.tmpl-hh-content ul li em strong {\n  text-transform: none;\n  display: inherit;\n  font-weight: 700;\n  font-size: inherit;\n  color: inherit;\n  font-style: normal !important;\n}\n\n.tmpl-hh-content ol li b,\n.tmpl-hh-content ol li strong,\n.tmpl-hh-content ul li b,\n.tmpl-hh-content ul li strong {\n  font-weight: 700;\n  font-size: inherit !important;\n  margin: 0 !important;\n  text-transform: none;\n  color: inherit !important;\n}\n\n.tmpl-hh-content p {\n  margin-bottom: 10px;\n}\n\n.tmpl-hh-content p b,\n.tmpl-hh-content p strong {\n  font-family: \"ProximaNovaCond\", sans-serif;\n  display: inline-block;\n  font-weight: 400;\n  font-size: 25px;\n  text-transform: uppercase;\n  color: #2F3441;\n  margin-top: 30px !important;\n}\n\n.tmpl-hh-content p em {\n  font-style: normal !important;\n}\n\n.tmpl-hh-content p em b,\n.tmpl-hh-content p em strong {\n  text-transform: none;\n  display: inherit;\n  font-weight: 700;\n  font-size: inherit;\n  color: inherit !important;\n  font-style: normal !important;\n  background: transparent;\n  padding: 0;\n}\n\n.tmpl-hh-content p:first-child b,\n.tmpl-hh-content p:first-child strong {\n  margin-top: 0 !important;\n}\n\n.tmpl-hh-content p:last-child {\n  margin-bottom: 0 !important;\n}\n\n.tmpl-hh-content .l-paddings {\n  padding: 0;\n}\n\n@media (max-width: 1019px) {\n  .tmpl-hh-wrapper {\n    max-width: 610px;\n  }\n}\n\n.tmpl-hh-header__slider {\n  position: relative;\n}\n\n.tmpl-hh-header__wrapper {\n  display: flex;\n  flex-wrap: nowrap;\n}\n\n.tmpl-hh-header__slide {\n  flex-shrink: 0;\n  width: 100%;\n  position: relative;\n}\n\n.tmpl-hh-header__slide-text {\n  font-size: 32px;\n  line-height: 100%;\n  letter-spacing: -0.5px;\n  color: #FFFFFF;\n  position: absolute;\n  bottom: 40px;\n  left: 48px;\n  max-width: 250px;\n}\n\n.tmpl-hh-header__image {\n  width: 100%;\n  height: auto;\n  transform: scale(1.02);\n}\n\n.tmpl-hh-header__slogan, .tmpl-hh-header__logo {\n  position: absolute;\n  top: 40px;\n}\n\n.tmpl-hh-header__slogan {\n  left: 48px;\n  width: 145px;\n  height: auto;\n}\n\n.tmpl-hh-header__logo {\n  right: 48px;\n  width: 82px;\n  height: auto;\n}\n\n@media (max-width: 699px) {\n  .tmpl-hh-header__slider {\n    border-radius: 8px;\n    overflow: hidden;\n  }\n  .tmpl-hh-header__slide-text {\n    max-width: 170px;\n    font-size: 22px;\n    bottom: 44px;\n    left: 16px;\n  }\n  .tmpl-hh-header__slogan, .tmpl-hh-header__logo {\n    top: 30px;\n  }\n  .tmpl-hh-header__slogan {\n    width: 103px;\n    left: 16px;\n  }\n  .tmpl-hh-header__logo {\n    right: 16px;\n  }\n}\n\n.tmpl-hh-content {\n  padding: 50px 48px 42px;\n}\n\n.tmpl-hh-content ul,\n.tmpl-hh-content ol {\n  margin-left: 4px;\n}\n\n.tmpl-hh-content ul li,\n.tmpl-hh-content ol li {\n  list-style: none;\n  position: relative;\n  padding-left: 22px;\n}\n\n.tmpl-hh-content ul li:not(:last-child),\n.tmpl-hh-content ol li:not(:last-child) {\n  margin-bottom: 8px;\n}\n\n.tmpl-hh-content ul li:before,\n.tmpl-hh-content ol li:before {\n  content: \"\";\n  position: absolute;\n  display: block;\n  width: 16px;\n  border-bottom: 1px solid #2F3441;\n  left: 0;\n  top: 10px;\n}\n\n@media (max-width: 699px) {\n  .tmpl-hh-content {\n    padding: 40px 10px 37px;\n  }\n}\n</style>\n\n<script>\n//\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n(function polyfill() {\n  const relList = document.createElement(\"link\").relList;\n  if (relList && relList.supports && relList.supports(\"modulepreload\")) {\n    return;\n  }\n  for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n    processPreload(link);\n  }\n  new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      if (mutation.type !== \"childList\") {\n        continue;\n      }\n      for (const node of mutation.addedNodes) {\n        if (node.tagName === \"LINK\" && node.rel === \"modulepreload\")\n          processPreload(node);\n      }\n    }\n  }).observe(document, { childList: true, subtree: true });\n  function getFetchOpts(script) {\n    const fetchOpts = {};\n    if (script.integrity)\n      fetchOpts.integrity = script.integrity;\n    if (script.referrerpolicy)\n      fetchOpts.referrerPolicy = script.referrerpolicy;\n    if (script.crossorigin === \"use-credentials\")\n      fetchOpts.credentials = \"include\";\n    else if (script.crossorigin === \"anonymous\")\n      fetchOpts.credentials = \"omit\";\n    else\n      fetchOpts.credentials = \"same-origin\";\n    return fetchOpts;\n  }\n  function processPreload(link) {\n    if (link.ep)\n      return;\n    link.ep = true;\n    const fetchOpts = getFetchOpts(link);\n    fetch(link.href, fetchOpts);\n  }\n})();\nconst index$1 = \"\";\nfunction isObject$1(obj) {\n  return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend$1(target = {}, src = {}) {\n  Object.keys(src).forEach((key) => {\n    if (typeof target[key] === \"undefined\")\n      target[key] = src[key];\n    else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {\n      extend$1(target[key], src[key]);\n    }\n  });\n}\nconst ssrDocument = {\n  body: {},\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  activeElement: {\n    blur() {\n    },\n    nodeName: \"\"\n  },\n  querySelector() {\n    return null;\n  },\n  querySelectorAll() {\n    return [];\n  },\n  getElementById() {\n    return null;\n  },\n  createEvent() {\n    return {\n      initEvent() {\n      }\n    };\n  },\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute() {\n      },\n      getElementsByTagName() {\n        return [];\n      }\n    };\n  },\n  createElementNS() {\n    return {};\n  },\n  importNode() {\n    return null;\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  }\n};\nfunction getDocument() {\n  const doc = typeof document !== \"undefined\" ? document : {};\n  extend$1(doc, ssrDocument);\n  return doc;\n}\nconst ssrWindow = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  location: {\n    hash: \"\",\n    host: \"\",\n    hostname: \"\",\n    href: \"\",\n    origin: \"\",\n    pathname: \"\",\n    protocol: \"\",\n    search: \"\"\n  },\n  history: {\n    replaceState() {\n    },\n    pushState() {\n    },\n    go() {\n    },\n    back() {\n    }\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener() {\n  },\n  removeEventListener() {\n  },\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return \"\";\n      }\n    };\n  },\n  Image() {\n  },\n  Date() {\n  },\n  screen: {},\n  setTimeout() {\n  },\n  clearTimeout() {\n  },\n  matchMedia() {\n    return {};\n  },\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === \"undefined\") {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === \"undefined\") {\n      return;\n    }\n    clearTimeout(id);\n  }\n};\nfunction getWindow() {\n  const win = typeof window !== \"undefined\" ? window : {};\n  extend$1(win, ssrWindow);\n  return win;\n}\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, \"__proto__\", {\n    get() {\n      return proto;\n    },\n    set(value) {\n      proto.__proto__ = value;\n    }\n  });\n}\nclass Dom7 extends Array {\n  constructor(items) {\n    if (typeof items === \"number\") {\n      super(items);\n    } else {\n      super(...items || []);\n      makeReactive(this);\n    }\n  }\n}\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach((el) => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1)\n      uniqueArray.push(arr[i]);\n  }\n  return uniqueArray;\n}\nfunction qsa(selector, context) {\n  if (typeof selector !== \"string\") {\n    return [selector];\n  }\n  const a = [];\n  const res = context.querySelectorAll(selector);\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n  return a;\n}\nfunction $(selector, context) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  let arr = [];\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n  if (!selector) {\n    return new Dom7(arr);\n  }\n  if (typeof selector === \"string\") {\n    const html2 = selector.trim();\n    if (html2.indexOf(\"<\") >= 0 && html2.indexOf(\">\") >= 0) {\n      let toCreate = \"div\";\n      if (html2.indexOf(\"<li\") === 0)\n        toCreate = \"ul\";\n      if (html2.indexOf(\"<tr\") === 0)\n        toCreate = \"tbody\";\n      if (html2.indexOf(\"<td\") === 0 || html2.indexOf(\"<th\") === 0)\n        toCreate = \"tr\";\n      if (html2.indexOf(\"<tbody\") === 0)\n        toCreate = \"table\";\n      if (html2.indexOf(\"<option\") === 0)\n        toCreate = \"select\";\n      const tempParent = document2.createElement(toCreate);\n      tempParent.innerHTML = html2;\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document2);\n    }\n  } else if (selector.nodeType || selector === window2 || selector === document2) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7)\n      return selector;\n    arr = selector;\n  }\n  return new Dom7(arrayUnique(arr));\n}\n$.fn = Dom7.prototype;\nfunction addClass(...classes2) {\n  const classNames = arrayFlat(classes2.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\nfunction removeClass(...classes2) {\n  const classNames = arrayFlat(classes2.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\nfunction toggleClass(...classes2) {\n  const classNames = arrayFlat(classes2.map((c) => c.split(\" \")));\n  this.forEach((el) => {\n    classNames.forEach((className) => {\n      el.classList.toggle(className);\n    });\n  });\n}\nfunction hasClass(...classes2) {\n  const classNames = arrayFlat(classes2.map((c) => c.split(\" \")));\n  return arrayFilter(this, (el) => {\n    return classNames.filter((className) => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === \"string\") {\n    if (this[0])\n      return this[0].getAttribute(attrs);\n    return void 0;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      this[i].setAttribute(attrs, value);\n    } else {\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n  return this;\n}\nfunction removeAttr(attr2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr2);\n  }\n  return this;\n}\nfunction transform(transform2) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform2;\n  }\n  return this;\n}\nfunction transition$1(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== \"string\" ? `${duration}ms` : duration;\n  }\n  return this;\n}\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target)\n      return;\n    const eventData = e.target.dom7EventData || [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    if ($(target).is(targetSelector))\n      listener.apply(target, eventData);\n    else {\n      const parents2 = $(target).parents();\n      for (let k = 0; k < parents2.length; k += 1) {\n        if ($(parents2[k]).is(targetSelector))\n          listener.apply(parents2[k], eventData);\n      }\n    }\n  }\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    listener.apply(this, eventData);\n  }\n  const events2 = eventType.split(\" \");\n  let j;\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (!targetSelector) {\n      for (j = 0; j < events2.length; j += 1) {\n        const event = events2[j];\n        if (!el.dom7Listeners)\n          el.dom7Listeners = {};\n        if (!el.dom7Listeners[event])\n          el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      for (j = 0; j < events2.length; j += 1) {\n        const event = events2[j];\n        if (!el.dom7LiveListeners)\n          el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event])\n          el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n  return this;\n}\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === \"function\") {\n    [eventType, listener, capture] = args;\n    targetSelector = void 0;\n  }\n  if (!capture)\n    capture = false;\n  const events2 = eventType.split(\" \");\n  for (let i = 0; i < events2.length; i += 1) {\n    const event = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n  return this;\n}\nfunction trigger(...args) {\n  const window2 = getWindow();\n  const events2 = args[0].split(\" \");\n  const eventData = args[1];\n  for (let i = 0; i < events2.length; i += 1) {\n    const event = events2[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      if (window2.CustomEvent) {\n        const evt = new window2.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n  return this;\n}\nfunction transitionEnd$1(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this)\n      return;\n    callback.call(this, e);\n    dom.off(\"transitionend\", fireCallBack);\n  }\n  if (callback) {\n    dom.on(\"transitionend\", fireCallBack);\n  }\n  return this;\n}\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetWidth + parseFloat(styles2.getPropertyValue(\"margin-right\")) + parseFloat(styles2.getPropertyValue(\"margin-left\"));\n    }\n    return this[0].offsetWidth;\n  }\n  return null;\n}\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles2 = this.styles();\n      return this[0].offsetHeight + parseFloat(styles2.getPropertyValue(\"margin-top\")) + parseFloat(styles2.getPropertyValue(\"margin-bottom\"));\n    }\n    return this[0].offsetHeight;\n  }\n  return null;\n}\nfunction offset() {\n  if (this.length > 0) {\n    const window2 = getWindow();\n    const document2 = getDocument();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document2.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window2 ? window2.scrollY : el.scrollTop;\n    const scrollLeft = el === window2 ? window2.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n  return null;\n}\nfunction styles() {\n  const window2 = getWindow();\n  if (this[0])\n    return window2.getComputedStyle(this[0], null);\n  return {};\n}\nfunction css(props, value) {\n  const window2 = getWindow();\n  let i;\n  if (arguments.length === 1) {\n    if (typeof props === \"string\") {\n      if (this[0])\n        return window2.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n      return this;\n    }\n  }\n  if (arguments.length === 2 && typeof props === \"string\") {\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n    return this;\n  }\n  return this;\n}\nfunction each(callback) {\n  if (!callback)\n    return this;\n  this.forEach((el, index2) => {\n    callback.apply(el, [el, index2]);\n  });\n  return this;\n}\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\nfunction html(html2) {\n  if (typeof html2 === \"undefined\") {\n    return this[0] ? this[0].innerHTML : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html2;\n  }\n  return this;\n}\nfunction text(text2) {\n  if (typeof text2 === \"undefined\") {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text2;\n  }\n  return this;\n}\nfunction is(selector) {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === \"undefined\")\n    return false;\n  if (typeof selector === \"string\") {\n    if (el.matches)\n      return el.matches(selector);\n    if (el.webkitMatchesSelector)\n      return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector)\n      return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  if (selector === document2) {\n    return el === document2;\n  }\n  if (selector === window2) {\n    return el === window2;\n  }\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el)\n        return true;\n    }\n    return false;\n  }\n  return false;\n}\nfunction index() {\n  let child = this[0];\n  let i;\n  if (child) {\n    i = 0;\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1)\n        i += 1;\n    }\n    return i;\n  }\n  return void 0;\n}\nfunction eq(index2) {\n  if (typeof index2 === \"undefined\")\n    return this;\n  const length = this.length;\n  if (index2 > length - 1) {\n    return $([]);\n  }\n  if (index2 < 0) {\n    const returnIndex = length + index2;\n    if (returnIndex < 0)\n      return $([]);\n    return $([this[returnIndex]]);\n  }\n  return $([this[index2]]);\n}\nfunction append(...els) {\n  let newChild;\n  const document2 = getDocument();\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === \"string\") {\n        const tempDiv = document2.createElement(\"div\");\n        tempDiv.innerHTML = newChild;\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n  return this;\n}\nfunction prepend(newChild) {\n  const document2 = getDocument();\n  let i;\n  let j;\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === \"string\") {\n      const tempDiv = document2.createElement(\"div\");\n      tempDiv.innerHTML = newChild;\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n  return this;\n}\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n      return $([]);\n    }\n    if (this[0].nextElementSibling)\n      return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.nextElementSibling) {\n    const next2 = el.nextElementSibling;\n    if (selector) {\n      if ($(next2).is(selector))\n        nextEls.push(next2);\n    } else\n      nextEls.push(next2);\n    el = next2;\n  }\n  return $(nextEls);\n}\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n      return $([]);\n    }\n    if (el.previousElementSibling)\n      return $([el.previousElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el)\n    return $([]);\n  while (el.previousElementSibling) {\n    const prev2 = el.previousElementSibling;\n    if (selector) {\n      if ($(prev2).is(selector))\n        prevEls.push(prev2);\n    } else\n      prevEls.push(prev2);\n    el = prev2;\n  }\n  return $(prevEls);\n}\nfunction parent(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector))\n          parents2.push(this[i].parentNode);\n      } else {\n        parents2.push(this[i].parentNode);\n      }\n    }\n  }\n  return $(parents2);\n}\nfunction parents(selector) {\n  const parents2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    let parent2 = this[i].parentNode;\n    while (parent2) {\n      if (selector) {\n        if ($(parent2).is(selector))\n          parents2.push(parent2);\n      } else {\n        parents2.push(parent2);\n      }\n      parent2 = parent2.parentNode;\n    }\n  }\n  return $(parents2);\n}\nfunction closest(selector) {\n  let closest2 = this;\n  if (typeof selector === \"undefined\") {\n    return $([]);\n  }\n  if (!closest2.is(selector)) {\n    closest2 = closest2.parents(selector).eq(0);\n  }\n  return closest2;\n}\nfunction find(selector) {\n  const foundElements = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n  return $(foundElements);\n}\nfunction children(selector) {\n  const children2 = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children2.push(childNodes[j]);\n      }\n    }\n  }\n  return $(children2);\n}\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode)\n      this[i].parentNode.removeChild(this[i]);\n  }\n  return this;\n}\nconst Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  transform,\n  transition: transition$1,\n  on,\n  off,\n  trigger,\n  transitionEnd: transitionEnd$1,\n  outerWidth,\n  outerHeight,\n  styles,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove\n};\nObject.keys(Methods).forEach((methodName) => {\n  Object.defineProperty($.fn, methodName, {\n    value: Methods[methodName],\n    writable: true\n  });\n});\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach((key) => {\n    try {\n      object[key] = null;\n    } catch (e) {\n    }\n    try {\n      delete object[key];\n    } catch (e) {\n    }\n  });\n}\nfunction nextTick(callback, delay = 0) {\n  return setTimeout(callback, delay);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle$1(el) {\n  const window2 = getWindow();\n  let style;\n  if (window2.getComputedStyle) {\n    style = window2.getComputedStyle(el, null);\n  }\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n  if (!style) {\n    style = el.style;\n  }\n  return style;\n}\nfunction getTranslate(el, axis = \"x\") {\n  const window2 = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle$1(el);\n  if (window2.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n    if (curTransform.split(\",\").length > 6) {\n      curTransform = curTransform.split(\", \").map((a) => a.replace(\",\", \".\")).join(\", \");\n    }\n    transformMatrix = new window2.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n    matrix = transformMatrix.toString().split(\",\");\n  }\n  if (axis === \"x\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m41;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[12]);\n    else\n      curTransform = parseFloat(matrix[4]);\n  }\n  if (axis === \"y\") {\n    if (window2.WebKitCSSMatrix)\n      curTransform = transformMatrix.m42;\n    else if (matrix.length === 16)\n      curTransform = parseFloat(matrix[13]);\n    else\n      curTransform = parseFloat(matrix[5]);\n  }\n  return curTransform || 0;\n}\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n  if (typeof window !== \"undefined\" && typeof window.HTMLElement !== \"undefined\") {\n    return node instanceof HTMLElement;\n  }\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend(...args) {\n  const to = Object(args[0]);\n  const noExtend = [\"__proto__\", \"constructor\", \"prototype\"];\n  for (let i = 1; i < args.length; i += 1) {\n    const nextSource = args[i];\n    if (nextSource !== void 0 && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== void 0 && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n  return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll({\n  swiper,\n  targetPosition,\n  side\n}) {\n  const window2 = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = \"none\";\n  window2.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n  const isOutOfBound = (current, target) => {\n    return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n  };\n  const animate = () => {\n    time = new Date().getTime();\n    if (startTime === null) {\n      startTime = time;\n    }\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = \"hidden\";\n      swiper.wrapperEl.style.scrollSnapType = \"\";\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = \"\";\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window2.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n    swiper.cssModeFrameID = window2.requestAnimationFrame(animate);\n  };\n  animate();\n}\nlet support;\nfunction calcSupport() {\n  const window2 = getWindow();\n  const document2 = getDocument();\n  return {\n    smoothScroll: document2.documentElement && \"scrollBehavior\" in document2.documentElement.style,\n    touch: !!(\"ontouchstart\" in window2 || window2.DocumentTouch && document2 instanceof window2.DocumentTouch),\n    passiveListener: function checkPassiveListener() {\n      let supportsPassive = false;\n      try {\n        const opts = Object.defineProperty({}, \"passive\", {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          }\n        });\n        window2.addEventListener(\"testPassiveListener\", null, opts);\n      } catch (e) {\n      }\n      return supportsPassive;\n    }(),\n    gestures: function checkGestures() {\n      return \"ongesturestart\" in window2;\n    }()\n  };\n}\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n  return support;\n}\nlet deviceCached;\nfunction calcDevice({\n  userAgent\n} = {}) {\n  const support2 = getSupport();\n  const window2 = getWindow();\n  const platform = window2.navigator.platform;\n  const ua = userAgent || window2.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window2.screen.width;\n  const screenHeight = window2.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === \"Win32\";\n  let macos = platform === \"MacIntel\";\n  const iPadScreens = [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"];\n  if (!ipad && macos && support2.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad)\n      ipad = [0, 1, \"13_0_0\"];\n    macos = false;\n  }\n  if (android && !windows) {\n    device.os = \"android\";\n    device.android = true;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = \"ios\";\n    device.ios = true;\n  }\n  return device;\n}\nfunction getDevice(overrides = {}) {\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n  return deviceCached;\n}\nlet browser;\nfunction calcBrowser() {\n  const window2 = getWindow();\n  function isSafari() {\n    const ua = window2.navigator.userAgent.toLowerCase();\n    return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n  }\n  return {\n    isSafari: isSafari(),\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window2.navigator.userAgent)\n  };\n}\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n  return browser;\n}\nfunction Resize({\n  swiper,\n  on: on2,\n  emit\n}) {\n  const window2 = getWindow();\n  let observer = null;\n  let animationFrame = null;\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"beforeResize\");\n    emit(\"resize\");\n  };\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    observer = new ResizeObserver((entries) => {\n      animationFrame = window2.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(({\n          contentBoxSize,\n          contentRect,\n          target\n        }) => {\n          if (target && target !== swiper.el)\n            return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n  const removeObserver = () => {\n    if (animationFrame) {\n      window2.cancelAnimationFrame(animationFrame);\n    }\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized)\n      return;\n    emit(\"orientationchange\");\n  };\n  on2(\"init\", () => {\n    if (swiper.params.resizeObserver && typeof window2.ResizeObserver !== \"undefined\") {\n      createObserver();\n      return;\n    }\n    window2.addEventListener(\"resize\", resizeHandler);\n    window2.addEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n  on2(\"destroy\", () => {\n    removeObserver();\n    window2.removeEventListener(\"resize\", resizeHandler);\n    window2.removeEventListener(\"orientationchange\", orientationChangeHandler);\n  });\n}\nfunction Observer({\n  swiper,\n  extendParams,\n  on: on2,\n  emit\n}) {\n  const observers = [];\n  const window2 = getWindow();\n  const attach = (target, options = {}) => {\n    const ObserverFunc = window2.MutationObserver || window2.WebkitMutationObserver;\n    const observer = new ObserverFunc((mutations) => {\n      if (mutations.length === 1) {\n        emit(\"observerUpdate\", mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate2() {\n        emit(\"observerUpdate\", mutations[0]);\n      };\n      if (window2.requestAnimationFrame) {\n        window2.requestAnimationFrame(observerUpdate);\n      } else {\n        window2.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n      childList: typeof options.childList === \"undefined\" ? true : options.childList,\n      characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n  const init = () => {\n    if (!swiper.params.observer)\n      return;\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    }\n    attach(swiper.$el[0], {\n      childList: swiper.params.observeSlideChildren\n    });\n    attach(swiper.$wrapperEl[0], {\n      attributes: false\n    });\n  };\n  const destroy = () => {\n    observers.forEach((observer) => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on2(\"init\", init);\n  on2(\"destroy\", destroy);\n}\nconst eventsEmitter = {\n  on(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    events2.split(\" \").forEach((event) => {\n      if (!self.eventsListeners[event])\n        self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n  once(events2, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    function onceHandler(...args) {\n      self.off(events2, onceHandler);\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.__emitterProxy = handler;\n    return self.on(events2, onceHandler, priority);\n  },\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (typeof handler !== \"function\")\n      return self;\n    const method = priority ? \"unshift\" : \"push\";\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n    return self;\n  },\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsAnyListeners)\n      return self;\n    const index2 = self.eventsAnyListeners.indexOf(handler);\n    if (index2 >= 0) {\n      self.eventsAnyListeners.splice(index2, 1);\n    }\n    return self;\n  },\n  off(events2, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    events2.split(\" \").forEach((event) => {\n      if (typeof handler === \"undefined\") {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index2) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index2, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit(...args) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed)\n      return self;\n    if (!self.eventsListeners)\n      return self;\n    let events2;\n    let data;\n    let context;\n    if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n      events2 = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events2 = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    data.unshift(context);\n    const eventsArray = Array.isArray(events2) ? events2 : events2.split(\" \");\n    eventsArray.forEach((event) => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach((eventHandler) => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler) => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};\nfunction updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n  if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n  if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  }\n  width = width - parseInt($el.css(\"padding-left\") || 0, 10) - parseInt($el.css(\"padding-right\") || 0, 10);\n  height = height - parseInt($el.css(\"padding-top\") || 0, 10) - parseInt($el.css(\"padding-bottom\") || 0, 10);\n  if (Number.isNaN(width))\n    width = 0;\n  if (Number.isNaN(height))\n    height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}\nfunction updateSlides() {\n  const swiper = this;\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    }\n    return {\n      \"width\": \"height\",\n      \"margin-top\": \"margin-left\",\n      \"margin-bottom \": \"margin-right\",\n      \"margin-left\": \"margin-top\",\n      \"margin-right\": \"margin-bottom\",\n      \"padding-left\": \"padding-top\",\n      \"padding-right\": \"padding-bottom\",\n      \"marginRight\": \"marginBottom\"\n    }[property];\n  }\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    $wrapperEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === \"function\") {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === \"function\") {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index2 = 0;\n  if (typeof swiperSize === \"undefined\") {\n    return;\n  }\n  if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n  }\n  swiper.virtualSize = -spaceBetween;\n  if (rtl)\n    slides.css({\n      marginLeft: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  else\n    slides.css({\n      marginRight: \"\",\n      marginBottom: \"\",\n      marginTop: \"\"\n    });\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", \"\");\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", \"\");\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  }\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key) => {\n    return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n  }).length > 0;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide2 = slides.eq(i);\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide2, slidesLength, getDirectionLabel);\n    }\n    if (slide2.css(\"display\") === \"none\")\n      continue;\n    if (params.slidesPerView === \"auto\") {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel(\"width\")] = ``;\n      }\n      const slideStyles = getComputedStyle(slide2[0]);\n      const currentTransform = slide2[0].style.transform;\n      const currentWebKitTransform = slide2[0].style.webkitTransform;\n      if (currentTransform) {\n        slide2[0].style.transform = \"none\";\n      }\n      if (currentWebKitTransform) {\n        slide2[0].style.webkitTransform = \"none\";\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? slide2.outerWidth(true) : slide2.outerHeight(true);\n      } else {\n        const width = getDirectionPropertyValue(slideStyles, \"width\");\n        const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n        const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n        const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n        const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n        const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n        if (boxSizing && boxSizing === \"border-box\") {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide2[0];\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide2[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide2[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths)\n        slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel(\"width\")] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0)\n        slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1e3)\n        slidePosition = 0;\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if (index2 % params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths)\n        slidePosition = Math.floor(slidePosition);\n      if ((index2 - Math.min(swiper.params.slidesPerGroupSkip, index2)) % swiper.params.slidesPerGroup === 0)\n        snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index2 += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n    $wrapperEl.css({\n      width: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (params.setWrapperSize) {\n    $wrapperEl.css({\n      [getDirectionLabel(\"width\")]: `${swiper.virtualSize + params.spaceBetween}px`\n    });\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  }\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths)\n        slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0)\n    snapGrid = [0];\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : getDirectionLabel(\"marginRight\");\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode)\n        return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).css({\n      [key]: `${spaceBetween}px`\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map((snap) => {\n      if (snap < 0)\n        return -offsetBefore;\n      if (snap > maxSnap)\n        return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-before\", `${-snapGrid[0]}px`);\n    setCSSProperty(swiper.wrapperEl, \"--swiper-centered-offset-after\", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map((v) => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map((v) => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit(\"slidesLengthChange\");\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow)\n      swiper.checkOverflow();\n    swiper.emit(\"snapGridLengthChange\");\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit(\"slidesGridLengthChange\");\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.$el.hasClass(backFaceHiddenClass);\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded)\n        swiper.$el.addClass(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.$el.removeClass(backFaceHiddenClass);\n    }\n  }\n}\nfunction updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === \"number\") {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = (index2) => {\n    if (isVirtual) {\n      return swiper.slides.filter((el) => parseInt(el.getAttribute(\"data-swiper-slide-index\"), 10) === index2)[0];\n    }\n    return swiper.slides.eq(index2)[0];\n  };\n  if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || $([])).each((slide2) => {\n        activeSlides.push(slide2);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index2 = swiper.activeIndex + i;\n        if (index2 > swiper.slides.length && !isVirtual)\n          break;\n        activeSlides.push(getSlideByIndex(index2));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== \"undefined\") {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n  if (newHeight || newHeight === 0)\n    swiper.$wrapperEl.css(\"height\", `${newHeight}px`);\n}\nfunction updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\nfunction updateSlidesProgress(translate2 = this && this.translate || 0) {\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0)\n    return;\n  if (typeof slides[0].swiperSlideOffset === \"undefined\")\n    swiper.updateSlidesOffset();\n  let offsetCenter = -translate2;\n  if (rtl)\n    offsetCenter = translate2;\n  slides.removeClass(params.slideVisibleClass);\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide2 = slides[i];\n    let slideOffset = slide2.swiperSlideOffset;\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide2.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide2.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n    if (isVisible) {\n      swiper.visibleSlides.push(slide2);\n      swiper.visibleSlidesIndexes.push(i);\n      slides.eq(i).addClass(params.slideVisibleClass);\n    }\n    slide2.progress = rtl ? -slideProgress : slideProgress;\n    slide2.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n  swiper.visibleSlides = $(swiper.visibleSlides);\n}\nfunction updateProgress(translate2) {\n  const swiper = this;\n  if (typeof translate2 === \"undefined\") {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    translate2 = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate2 - swiper.minTranslate()) / translatesDiff;\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n  Object.assign(swiper, {\n    progress,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight)\n    swiper.updateSlidesProgress(translate2);\n  if (isBeginning && !wasBeginning) {\n    swiper.emit(\"reachBeginning toEdge\");\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit(\"reachEnd toEdge\");\n  }\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit(\"fromEdge\");\n  }\n  swiper.emit(\"progress\", progress);\n}\nfunction updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    $wrapperEl,\n    activeIndex,\n    realIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n  let activeSlide;\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  }\n  activeSlide.addClass(params.slideActiveClass);\n  if (params.loop) {\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`).addClass(params.slideDuplicateActiveClass);\n    }\n  }\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  }\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n  if (params.loop) {\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicateNextClass);\n    }\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl.children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr(\"data-swiper-slide-index\")}\"]`).addClass(params.slideDuplicatePrevClass);\n    }\n  }\n  swiper.emitSlidesClasses();\n}\nfunction updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate2 = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid,\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  if (typeof activeIndex === \"undefined\") {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (translate2 >= slidesGrid[i] && translate2 < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n          activeIndex = i;\n        } else if (translate2 >= slidesGrid[i] && translate2 < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate2 >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    }\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === \"undefined\")\n        activeIndex = 0;\n    }\n  }\n  if (snapGrid.indexOf(translate2) >= 0) {\n    snapIndex = snapGrid.indexOf(translate2);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit(\"snapIndexChange\");\n    }\n    return;\n  }\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr(\"data-swiper-slide-index\") || activeIndex, 10);\n  Object.assign(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  swiper.emit(\"activeIndexChange\");\n  swiper.emit(\"snapIndexChange\");\n  if (previousRealIndex !== realIndex) {\n    swiper.emit(\"realIndexChange\");\n  }\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit(\"slideChange\");\n  }\n}\nfunction updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide2 = $(e).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  let slideIndex;\n  if (slide2) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide2) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n  if (slide2 && slideFound) {\n    swiper.clickedSlide = slide2;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt($(slide2).attr(\"data-swiper-slide-index\"), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = void 0;\n    swiper.clickedIndex = void 0;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== void 0 && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\nconst update = {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};\nfunction getSwiperTranslate(axis = this.isHorizontal() ? \"x\" : \"y\") {\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate: translate2,\n    $wrapperEl\n  } = swiper;\n  if (params.virtualTranslate) {\n    return rtl ? -translate2 : translate2;\n  }\n  if (params.cssMode) {\n    return translate2;\n  }\n  let currentTranslate = getTranslate($wrapperEl[0], axis);\n  if (rtl)\n    currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}\nfunction setTranslate(translate2, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    $wrapperEl,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate2 : translate2;\n  } else {\n    y = translate2;\n  }\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate2 - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate2);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\nfunction minTranslate() {\n  return -this.snapGrid[0];\n}\nfunction maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}\nfunction translateTo(translate2 = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate2 = swiper.minTranslate();\n  const maxTranslate2 = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate2 > minTranslate2)\n    newTranslate = minTranslate2;\n  else if (translateBounds && translate2 < maxTranslate2)\n    newTranslate = maxTranslate2;\n  else\n    newTranslate = translate2;\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: -newTranslate,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionEnd\");\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit(\"beforeTransitionStart\", speed, internal);\n      swiper.emit(\"transitionStart\");\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd2(e) {\n          if (!swiper || swiper.destroyed)\n            return;\n          if (e.target !== this)\n            return;\n          swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit(\"transitionEnd\");\n          }\n        };\n      }\n      swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}\nconst translate = {\n  getTranslate: getSwiperTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};\nfunction setTransition(duration, byController) {\n  const swiper = this;\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n  swiper.emit(\"setTransition\", duration, byController);\n}\nfunction transitionEmit({\n  swiper,\n  runCallbacks,\n  direction,\n  step\n}) {\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex)\n      dir = \"next\";\n    else if (activeIndex < previousIndex)\n      dir = \"prev\";\n    else\n      dir = \"reset\";\n  }\n  swiper.emit(`transition${step}`);\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === \"reset\") {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n    swiper.emit(`slideChangeTransition${step}`);\n    if (dir === \"next\") {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}\nfunction transitionStart(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode)\n    return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"Start\"\n  });\n}\nfunction transitionEnd(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode)\n    return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: \"End\"\n  });\n}\nconst transition = {\n  setTransition,\n  transitionStart,\n  transitionEnd\n};\nfunction slideTo(index2 = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {\n  if (typeof index2 !== \"number\" && typeof index2 !== \"string\") {\n    throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof index2}] given.`);\n  }\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let slideIndex = index2;\n  if (slideIndex < 0)\n    slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length)\n    snapIndex = snapGrid.length - 1;\n  const translate2 = -snapGrid[snapIndex];\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate2 * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n      if (typeof slidesGrid[i + 1] !== \"undefined\") {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  }\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate2 < swiper.translate && translate2 < swiper.minTranslate()) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate2 > swiper.translate && translate2 > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex)\n        return false;\n    }\n  }\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n    swiper.emit(\"beforeSlideChangeStart\");\n  }\n  swiper.updateProgress(translate2);\n  let direction;\n  if (slideIndex > activeIndex)\n    direction = \"next\";\n  else if (slideIndex < activeIndex)\n    direction = \"prev\";\n  else\n    direction = \"reset\";\n  if (rtl && -translate2 === swiper.translate || !rtl && translate2 === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex);\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== \"slide\") {\n      swiper.setTranslate(translate2);\n    }\n    if (direction !== \"reset\") {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate2 : -translate2;\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = \"none\";\n        swiper._immediateVirtual = true;\n      }\n      wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = \"\";\n          swiper._swiperImmediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? \"left\" : \"top\"\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? \"left\" : \"top\"]: t,\n        behavior: \"smooth\"\n      });\n    }\n    return true;\n  }\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate2);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit(\"beforeTransitionStart\", speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd2(e) {\n        if (!swiper || swiper.destroyed)\n          return;\n        if (e.target !== this)\n          return;\n        swiper.$wrapperEl[0].removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n    swiper.$wrapperEl[0].addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    swiper.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", swiper.onSlideToWrapperTransitionEnd);\n  }\n  return true;\n}\nfunction slideToLoop(index2 = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  if (typeof index2 === \"string\") {\n    const indexAsNumber = parseInt(index2, 10);\n    const isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index2}] given.`);\n    }\n    index2 = indexAsNumber;\n  }\n  const swiper = this;\n  let newIndex = index2;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\nfunction slideNext(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    animating,\n    enabled,\n    params\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  let perGroup = params.slidesPerGroup;\n  if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n  }\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\nfunction slidePrev(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    animating,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return swiper;\n  if (params.loop) {\n    if (animating && params.loopPreventsSlide)\n      return false;\n    swiper.loopFix();\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  const translate2 = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0)\n      return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate2);\n  const normalizedSnapGrid = snapGrid.map((val) => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === \"undefined\" && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        prevSnapIndex = snapIndex;\n      }\n    });\n    if (typeof prevSnapIndex !== \"undefined\") {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n  let prevIndex = 0;\n  if (typeof prevSnap !== \"undefined\") {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0)\n      prevIndex = swiper.activeIndex - 1;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\nfunction slideReset(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\nfunction slideToClosest(speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {\n  const swiper = this;\n  let index2 = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index2);\n  const snapIndex = skip + Math.floor((index2 - skip) / swiper.params.slidesPerGroup);\n  const translate2 = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  if (translate2 >= swiper.snapGrid[snapIndex]) {\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if (translate2 - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index2 += swiper.params.slidesPerGroup;\n    }\n  } else {\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if (translate2 - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index2 -= swiper.params.slidesPerGroup;\n    }\n  }\n  index2 = Math.max(index2, 0);\n  index2 = Math.min(index2, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index2, speed, runCallbacks, internal);\n}\nfunction slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  if (params.loop) {\n    if (swiper.animating)\n      return;\n    realIndex = parseInt($(swiper.clickedSlide).attr(\"data-swiper-slide-index\"), 10);\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl.children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`).eq(0).index();\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\nconst slide = {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};\nfunction loopCreate() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    $wrapperEl\n  } = swiper;\n  const $selector = $wrapperEl.children().length > 0 ? $($wrapperEl.children()[0].parentNode) : $wrapperEl;\n  $selector.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n  let slides = $selector.children(`.${params.slideClass}`);\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = $(document2.createElement(\"div\")).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $selector.append(blankNode);\n      }\n      slides = $selector.children(`.${params.slideClass}`);\n    }\n  }\n  if (params.slidesPerView === \"auto\" && !params.loopedSlides)\n    params.loopedSlides = slides.length;\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n  if (swiper.loopedSlides > slides.length && swiper.params.loopedSlidesLimit) {\n    swiper.loopedSlides = slides.length;\n  }\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((el, index2) => {\n    const slide2 = $(el);\n    slide2.attr(\"data-swiper-slide-index\", index2);\n  });\n  for (let i = 0; i < swiper.loopedSlides; i += 1) {\n    const index2 = i - Math.floor(i / slides.length) * slides.length;\n    appendSlides.push(slides.eq(index2)[0]);\n    prependSlides.unshift(slides.eq(slides.length - index2 - 1)[0]);\n  }\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $selector.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $selector.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\nfunction loopFix() {\n  const swiper = this;\n  swiper.emit(\"beforeLoopFix\");\n  const {\n    activeIndex,\n    slides,\n    loopedSlides,\n    allowSlidePrev,\n    allowSlideNext,\n    snapGrid,\n    rtlTranslate: rtl\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate();\n  if (activeIndex < loopedSlides) {\n    newIndex = slides.length - loopedSlides * 3 + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  swiper.emit(\"loopFix\");\n}\nfunction loopDestroy() {\n  const swiper = this;\n  const {\n    $wrapperEl,\n    params,\n    slides\n  } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr(\"data-swiper-slide-index\");\n}\nconst loop = {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};\nfunction setGrabCursor(moving) {\n  const swiper = this;\n  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode)\n    return;\n  const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n  el.style.cursor = \"move\";\n  el.style.cursor = moving ? \"grabbing\" : \"grab\";\n}\nfunction unsetGrabCursor() {\n  const swiper = this;\n  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n  swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n}\nconst grabCursor = {\n  setGrabCursor,\n  unsetGrabCursor\n};\nfunction closestElement(selector, base = this) {\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow())\n      return null;\n    if (el.assignedSlot)\n      el = el.assignedSlot;\n    const found = el.closest(selector);\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n    return found || __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\nfunction onTouchStart(event) {\n  const swiper = this;\n  const document2 = getDocument();\n  const window2 = getWindow();\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n  let e = event;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  let $targetEl = $(e.target);\n  if (params.touchEventsTarget === \"wrapper\") {\n    if (!$targetEl.closest(swiper.wrapperEl).length)\n      return;\n  }\n  data.isTouchEvent = e.type === \"touchstart\";\n  if (!data.isTouchEvent && \"which\" in e && e.which === 3)\n    return;\n  if (!data.isTouchEvent && \"button\" in e && e.button > 0)\n    return;\n  if (data.isTouched && data.isMoved)\n    return;\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n  const eventPath = event.composedPath ? event.composedPath() : event.path;\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n    $targetEl = $(eventPath[0]);\n  }\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, $targetEl[0]) : $targetEl.closest(noSwipingSelector)[0])) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0])\n      return;\n  }\n  touches.currentX = e.type === \"touchstart\" ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === \"touchstart\" ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window2.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === \"prevent\") {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: void 0,\n    startMoving: void 0\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = void 0;\n  if (params.threshold > 0)\n    data.allowThresholdMove = false;\n  if (e.type !== \"touchstart\") {\n    let preventDefault = true;\n    if ($targetEl.is(data.focusableElements)) {\n      preventDefault = false;\n      if ($targetEl[0].nodeName === \"SELECT\") {\n        data.isTouched = false;\n      }\n    }\n    if (document2.activeElement && $(document2.activeElement).is(data.focusableElements) && document2.activeElement !== $targetEl[0]) {\n      document2.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {\n      e.preventDefault();\n    }\n  }\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n  swiper.emit(\"touchStart\", e);\n}\nfunction onTouchMove(event) {\n  const document2 = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit(\"touchMoveOpposite\", e);\n    }\n    return;\n  }\n  if (data.isTouchEvent && e.type !== \"touchmove\")\n    return;\n  const targetTouch = e.type === \"touchmove\" && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === \"touchmove\" ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === \"touchmove\" ? targetTouch.pageY : e.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    if (!$(e.target).is(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n    return;\n  }\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n  if (data.isTouchEvent && document2.activeElement) {\n    if (e.target === document2.activeElement && $(e.target).is(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchMove\", e);\n  }\n  if (e.targetTouches && e.targetTouches.length > 1)\n    return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold)\n    return;\n  if (typeof data.isScrolling === \"undefined\") {\n    let touchAngle;\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit(\"touchMoveOpposite\", e);\n  }\n  if (typeof data.startMoving === \"undefined\") {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n  if (!data.isMoved) {\n    if (params.loop && !params.cssMode) {\n      swiper.loopFix();\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\");\n    }\n    data.allowMomentumBounce = false;\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit(\"sliderFirstMove\", e);\n  }\n  swiper.emit(\"sliderMove\", e);\n  data.isMoved = true;\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl)\n    diff = -diff;\n  swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance)\n      data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n  }\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n  if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n  if (!params.followFinger || params.cssMode)\n    return;\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  }\n  swiper.updateProgress(data.currentTranslate);\n  swiper.setTranslate(data.currentTranslate);\n}\nfunction onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  let e = event;\n  if (e.originalEvent)\n    e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit(\"touchEnd\", e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit(\"tap click\", e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit(\"doubleTap doubleClick\", e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed)\n      swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  }\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment2 = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment2] !== \"undefined\") {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment2]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment2] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  }\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === \"next\") {\n      if (ratio >= params.longSwipesRatio)\n        swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n      else\n        swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === \"prev\") {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === \"next\") {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === \"prev\") {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\nfunction onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0)\n    return;\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper;\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n  if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\nfunction onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled)\n    return;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks)\n      e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\nfunction onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled)\n    return;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  if (swiper.translate === 0)\n    swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n  swiper.emit(\"setTranslate\", swiper.translate, false);\n}\nlet dummyEventAttached = false;\nfunction dummyEventListener() {\n}\nconst events = (swiper, method) => {\n  const document2 = getDocument();\n  const {\n    params,\n    touchEvents,\n    el,\n    wrapperEl,\n    device,\n    support: support2\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n  const swiperMethod = method;\n  if (!support2.touch) {\n    el[domMethod](touchEvents.start, swiper.onTouchStart, false);\n    document2[domMethod](touchEvents.move, swiper.onTouchMove, capture);\n    document2[domMethod](touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    const passiveListener = touchEvents.start === \"touchstart\" && support2.passiveListener && params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    el[domMethod](touchEvents.start, swiper.onTouchStart, passiveListener);\n    el[domMethod](touchEvents.move, swiper.onTouchMove, support2.passiveListener ? {\n      passive: false,\n      capture\n    } : capture);\n    el[domMethod](touchEvents.end, swiper.onTouchEnd, passiveListener);\n    if (touchEvents.cancel) {\n      el[domMethod](touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n    }\n  }\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod](\"click\", swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n  }\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n  } else {\n    swiper[swiperMethod](\"observerUpdate\", onResize, true);\n  }\n};\nfunction attachEvents() {\n  const swiper = this;\n  const document2 = getDocument();\n  const {\n    params,\n    support: support2\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n  swiper.onClick = onClick.bind(swiper);\n  if (support2.touch && !dummyEventAttached) {\n    document2.addEventListener(\"touchstart\", dummyEventListener);\n    dummyEventAttached = true;\n  }\n  events(swiper, \"on\");\n}\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, \"off\");\n}\nconst events$1 = {\n  attachEvents,\n  detachEvents\n};\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints2 = params.breakpoints;\n  if (!breakpoints2 || breakpoints2 && Object.keys(breakpoints2).length === 0)\n    return;\n  const breakpoint = swiper.getBreakpoint(breakpoints2, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint)\n    return;\n  const breakpointOnlyParams = breakpoint in breakpoints2 ? breakpoints2[breakpoint] : void 0;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n    swiper.emitContainerClasses();\n  }\n  [\"navigation\", \"pagination\", \"scrollbar\"].forEach((prop) => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n  swiper.emit(\"breakpoint\", breakpointParams);\n}\nfunction getBreakpoint(breakpoints2, base = \"window\", containerEl) {\n  if (!breakpoints2 || base === \"container\" && !containerEl)\n    return void 0;\n  let breakpoint = false;\n  const window2 = getWindow();\n  const currentHeight = base === \"window\" ? window2.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints2).map((point) => {\n    if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n    if (base === \"window\") {\n      if (window2.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || \"max\";\n}\nconst breakpoints = {\n  setBreakpoint,\n  getBreakpoint\n};\nfunction prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach((item) => {\n    if (typeof item === \"object\") {\n      Object.keys(item).forEach((classNames) => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === \"string\") {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\nfunction addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    $el,\n    device,\n    support: support2\n  } = swiper;\n  const suffixes = prepareClasses([\"initialized\", params.direction, {\n    \"pointer-events\": !support2.touch\n  }, {\n    \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    \"autoheight\": params.autoHeight\n  }, {\n    \"rtl\": rtl\n  }, {\n    \"grid\": params.grid && params.grid.rows > 1\n  }, {\n    \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n  }, {\n    \"android\": device.android\n  }, {\n    \"ios\": device.ios\n  }, {\n    \"css-mode\": params.cssMode\n  }, {\n    \"centered\": params.cssMode && params.centeredSlides\n  }, {\n    \"watch-progress\": params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  $el.addClass([...classNames].join(\" \"));\n  swiper.emitContainerClasses();\n}\nfunction removeClasses() {\n  const swiper = this;\n  const {\n    $el,\n    classNames\n  } = swiper;\n  $el.removeClass(classNames.join(\" \"));\n  swiper.emitContainerClasses();\n}\nconst classes = {\n  addClasses,\n  removeClasses\n};\nfunction loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n  const window2 = getWindow();\n  let image;\n  function onReady() {\n    if (callback)\n      callback();\n  }\n  const isPicture = $(imageEl).parent(\"picture\")[0];\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new window2.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n      if (sizes) {\n        image.sizes = sizes;\n      }\n      if (srcset) {\n        image.srcset = srcset;\n      }\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    onReady();\n  }\n}\nfunction preloadImages() {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find(\"img\");\n  function onReady() {\n    if (typeof swiper === \"undefined\" || swiper === null || !swiper || swiper.destroyed)\n      return;\n    if (swiper.imagesLoaded !== void 0)\n      swiper.imagesLoaded += 1;\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady)\n        swiper.update();\n      swiper.emit(\"imagesReady\");\n    }\n  }\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute(\"src\"), imageEl.srcset || imageEl.getAttribute(\"srcset\"), imageEl.sizes || imageEl.getAttribute(\"sizes\"), true, onReady);\n  }\n}\nconst images = {\n  loadImage,\n  preloadImages\n};\nfunction checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n  }\n}\nconst checkOverflow$1 = {\n  checkOverflow\n};\nconst defaults = {\n  init: true,\n  direction: \"horizontal\",\n  touchEventsTarget: \"wrapper\",\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: \"input, select, option, textarea, button, video, label\",\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: \"slide\",\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n  // Breakpoints\n  breakpoints: void 0,\n  breakpointsBase: \"window\",\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopedSlidesLimit: true,\n  loopFillGroupWithBlank: false,\n  loopPreventsSlide: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: \"swiper-no-swiping\",\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  // NS\n  containerModifierClass: \"swiper-\",\n  // NEW\n  slideClass: \"swiper-slide\",\n  slideBlankClass: \"swiper-slide-invisible-blank\",\n  slideActiveClass: \"swiper-slide-active\",\n  slideDuplicateActiveClass: \"swiper-slide-duplicate-active\",\n  slideVisibleClass: \"swiper-slide-visible\",\n  slideDuplicateClass: \"swiper-slide-duplicate\",\n  slideNextClass: \"swiper-slide-next\",\n  slideDuplicateNextClass: \"swiper-slide-duplicate-next\",\n  slidePrevClass: \"swiper-slide-prev\",\n  slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\",\n  wrapperClass: \"swiper-wrapper\",\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};\nfunction moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj = {}) {\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n    if (typeof moduleParams !== \"object\" || moduleParams === null) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if ([\"navigation\", \"pagination\", \"scrollbar\"].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n    if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n    if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n    if (!params[moduleParamName])\n      params[moduleParamName] = {\n        enabled: false\n      };\n    extend(allModulesParams, obj);\n  };\n}\nconst prototypes = {\n  eventsEmitter,\n  update,\n  translate,\n  transition,\n  slide,\n  loop,\n  grabCursor,\n  events: events$1,\n  breakpoints,\n  checkOverflow: checkOverflow$1,\n  classes,\n  images\n};\nconst extendedDefaults = {};\nclass Swiper {\n  constructor(...args) {\n    let el;\n    let params;\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params)\n      params = {};\n    params = extend({}, params);\n    if (el && !params.el)\n      params.el = el;\n    if (params.el && $(params.el).length > 1) {\n      const swipers = [];\n      $(params.el).each((containerEl) => {\n        const newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    }\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n    const allModulesParams = {};\n    swiper.modules.forEach((mod) => {\n      mod({\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    });\n    const swiperParams = extend({}, defaults, allModulesParams);\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params);\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach((eventName) => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    }\n    swiper.$ = $;\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: $(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === \"horizontal\";\n      },\n      isVertical() {\n        return swiper.params.direction === \"vertical\";\n      },\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEvents: function touchEvents() {\n        const touch = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"];\n        const desktop = [\"pointerdown\", \"pointermove\", \"pointerup\"];\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3]\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2]\n        };\n        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }(),\n      touchEventsData: {\n        isTouched: void 0,\n        isMoved: void 0,\n        allowTouchCallbacks: void 0,\n        touchStartTime: void 0,\n        isScrolling: void 0,\n        currentTranslate: void 0,\n        startTranslate: void 0,\n        allowThresholdMove: void 0,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: now(),\n        clickTimeout: void 0,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: void 0,\n        isTouchEvent: void 0,\n        startMoving: void 0\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit(\"_swiper\");\n    if (swiper.params.init) {\n      swiper.init();\n    }\n    return swiper;\n  }\n  enable() {\n    const swiper = this;\n    if (swiper.enabled)\n      return;\n    swiper.enabled = true;\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n    swiper.emit(\"enable\");\n  }\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled)\n      return;\n    swiper.enabled = false;\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n    swiper.emit(\"disable\");\n  }\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const cls = swiper.el.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit(\"_containerClasses\", cls.join(\" \"));\n  }\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed)\n      return \"\";\n    return slideEl.className.split(\" \").filter((className) => {\n      return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(\" \");\n  }\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el)\n      return;\n    const updates = [];\n    swiper.slides.each((slideEl) => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit(\"_slideClass\", slideEl, classNames);\n    });\n    swiper.emit(\"_slideClasses\", updates);\n  }\n  slidesPerViewDynamic(view = \"current\", exact = false) {\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize)\n            breakLoop = true;\n        }\n      }\n    } else {\n      if (view === \"current\") {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n    return spv;\n  }\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed)\n      return;\n    const {\n      snapGrid,\n      params\n    } = swiper;\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    function setTranslate2() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate2();\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === \"auto\" || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate2();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit(\"update\");\n  }\n  changeDirection(newDirection, needUpdate = true) {\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n    }\n    if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n      return swiper;\n    }\n    swiper.$el.removeClass(`${swiper.params.containerModifierClass}${currentDirection}`).addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.each((slideEl) => {\n      if (newDirection === \"vertical\") {\n        slideEl.style.width = \"\";\n      } else {\n        slideEl.style.height = \"\";\n      }\n    });\n    swiper.emit(\"changeDirection\");\n    if (needUpdate)\n      swiper.update();\n    return swiper;\n  }\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\")\n      return;\n    swiper.rtl = direction === \"rtl\";\n    swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n    if (swiper.rtl) {\n      swiper.$el.addClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"rtl\";\n    } else {\n      swiper.$el.removeClass(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = \"ltr\";\n    }\n    swiper.update();\n  }\n  mount(el) {\n    const swiper = this;\n    if (swiper.mounted)\n      return true;\n    const $el = $(el || swiper.params.el);\n    el = $el[0];\n    if (!el) {\n      return false;\n    }\n    el.swiper = swiper;\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n    };\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = $(el.shadowRoot.querySelector(getWrapperSelector()));\n        res.children = (options) => $el.children(options);\n        return res;\n      }\n      if (!$el.children) {\n        return $($el).children(getWrapperSelector());\n      }\n      return $el.children(getWrapperSelector());\n    };\n    let $wrapperEl = getWrapper();\n    if ($wrapperEl.length === 0 && swiper.params.createElements) {\n      const document2 = getDocument();\n      const wrapper = document2.createElement(\"div\");\n      $wrapperEl = $(wrapper);\n      wrapper.className = swiper.params.wrapperClass;\n      $el.append(wrapper);\n      $el.children(`.${swiper.params.slideClass}`).each((slideEl) => {\n        $wrapperEl.append(slideEl);\n      });\n    }\n    Object.assign(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\",\n      rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || $el.css(\"direction\") === \"rtl\"),\n      wrongRTL: $wrapperEl.css(\"display\") === \"-webkit-box\"\n    });\n    return true;\n  }\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized)\n      return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false)\n      return swiper;\n    swiper.emit(\"beforeInit\");\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.addClasses();\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    }\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    }\n    swiper.attachEvents();\n    swiper.initialized = true;\n    swiper.emit(\"init\");\n    swiper.emit(\"afterInit\");\n    return swiper;\n  }\n  destroy(deleteInstance = true, cleanStyles = true) {\n    const swiper = this;\n    const {\n      params,\n      $el,\n      $wrapperEl,\n      slides\n    } = swiper;\n    if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n      return null;\n    }\n    swiper.emit(\"beforeDestroy\");\n    swiper.initialized = false;\n    swiper.detachEvents();\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr(\"style\");\n      $wrapperEl.removeAttr(\"style\");\n      if (slides && slides.length) {\n        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\");\n      }\n    }\n    swiper.emit(\"destroy\");\n    Object.keys(swiper.eventsListeners).forEach((eventName) => {\n      swiper.off(eventName);\n    });\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n    return null;\n  }\n  static extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults;\n  }\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__)\n      Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n    if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach((m) => Swiper.installModule(m));\n      return Swiper;\n    }\n    Swiper.installModule(module);\n    return Swiper;\n  }\n}\nObject.keys(prototypes).forEach((prototypeGroup) => {\n  Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nfunction Autoplay({\n  swiper,\n  extendParams,\n  on: on2,\n  emit\n}) {\n  let timeout;\n  swiper.autoplay = {\n    running: false,\n    paused: false\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3e3,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  function run() {\n    if (!swiper.size) {\n      swiper.autoplay.running = false;\n      swiper.autoplay.paused = false;\n      return;\n    }\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n    if ($activeSlideEl.attr(\"data-swiper-autoplay\")) {\n      delay = $activeSlideEl.attr(\"data-swiper-autoplay\") || swiper.params.autoplay.delay;\n    }\n    clearTimeout(timeout);\n    timeout = nextTick(() => {\n      let autoplayResult;\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.isBeginning) {\n          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          emit(\"autoplay\");\n        } else {\n          stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.isEnd) {\n        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);\n        emit(\"autoplay\");\n      } else {\n        stop();\n      }\n      if (swiper.params.cssMode && swiper.autoplay.running)\n        run();\n      else if (autoplayResult === false) {\n        run();\n      }\n    }, delay);\n  }\n  function start() {\n    if (typeof timeout !== \"undefined\")\n      return false;\n    if (swiper.autoplay.running)\n      return false;\n    swiper.autoplay.running = true;\n    emit(\"autoplayStart\");\n    run();\n    return true;\n  }\n  function stop() {\n    if (!swiper.autoplay.running)\n      return false;\n    if (typeof timeout === \"undefined\")\n      return false;\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = void 0;\n    }\n    swiper.autoplay.running = false;\n    emit(\"autoplayStop\");\n    return true;\n  }\n  function pause(speed) {\n    if (!swiper.autoplay.running)\n      return;\n    if (swiper.autoplay.paused)\n      return;\n    if (timeout)\n      clearTimeout(timeout);\n    swiper.autoplay.paused = true;\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      run();\n    } else {\n      [\"transitionend\", \"webkitTransitionEnd\"].forEach((event) => {\n        swiper.$wrapperEl[0].addEventListener(event, onTransitionEnd);\n      });\n    }\n  }\n  function onVisibilityChange() {\n    const document2 = getDocument();\n    if (document2.visibilityState === \"hidden\" && swiper.autoplay.running) {\n      pause();\n    }\n    if (document2.visibilityState === \"visible\" && swiper.autoplay.paused) {\n      run();\n      swiper.autoplay.paused = false;\n    }\n  }\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.$wrapperEl)\n      return;\n    if (e.target !== swiper.$wrapperEl[0])\n      return;\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event) => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n    swiper.autoplay.paused = false;\n    if (!swiper.autoplay.running) {\n      stop();\n    } else {\n      run();\n    }\n  }\n  function onMouseEnter() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n    } else {\n      emit(\"autoplayPause\");\n      pause();\n    }\n    [\"transitionend\", \"webkitTransitionEnd\"].forEach((event) => {\n      swiper.$wrapperEl[0].removeEventListener(event, onTransitionEnd);\n    });\n  }\n  function onMouseLeave() {\n    if (swiper.params.autoplay.disableOnInteraction) {\n      return;\n    }\n    swiper.autoplay.paused = false;\n    emit(\"autoplayResume\");\n    run();\n  }\n  function attachMouseEvents() {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.$el.on(\"mouseenter\", onMouseEnter);\n      swiper.$el.on(\"mouseleave\", onMouseLeave);\n    }\n  }\n  function detachMouseEvents() {\n    swiper.$el.off(\"mouseenter\", onMouseEnter);\n    swiper.$el.off(\"mouseleave\", onMouseLeave);\n  }\n  on2(\"init\", () => {\n    if (swiper.params.autoplay.enabled) {\n      start();\n      const document2 = getDocument();\n      document2.addEventListener(\"visibilitychange\", onVisibilityChange);\n      attachMouseEvents();\n    }\n  });\n  on2(\"beforeTransitionStart\", (_s, speed, internal) => {\n    if (swiper.autoplay.running) {\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.pause(speed);\n      } else {\n        stop();\n      }\n    }\n  });\n  on2(\"sliderFirstMove\", () => {\n    if (swiper.autoplay.running) {\n      if (swiper.params.autoplay.disableOnInteraction) {\n        stop();\n      } else {\n        pause();\n      }\n    }\n  });\n  on2(\"touchEnd\", () => {\n    if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n      run();\n    }\n  });\n  on2(\"destroy\", () => {\n    detachMouseEvents();\n    if (swiper.autoplay.running) {\n      stop();\n    }\n    const document2 = getDocument();\n    document2.removeEventListener(\"visibilitychange\", onVisibilityChange);\n  });\n  Object.assign(swiper.autoplay, {\n    pause,\n    run,\n    start,\n    stop\n  });\n}\nfunction effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams,\n    perspective,\n    recreateShadows,\n    getEffectParams\n  } = params;\n  on2(\"beforeInit\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on2(\"setTranslate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTranslate2();\n  });\n  on2(\"setTransition\", (_s, duration) => {\n    if (swiper.params.effect !== effect)\n      return;\n    setTransition2(duration);\n  });\n  on2(\"transitionEnd\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (recreateShadows) {\n      if (!getEffectParams || !getEffectParams().slideShadows)\n        return;\n      swiper.slides.each((slideEl) => {\n        const $slideEl = swiper.$(slideEl);\n        $slideEl.find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").remove();\n      });\n      recreateShadows();\n    }\n  });\n  let requireUpdateOnVirtual;\n  on2(\"virtualUpdate\", () => {\n    if (swiper.params.effect !== effect)\n      return;\n    if (!swiper.slides.length) {\n      requireUpdateOnVirtual = true;\n    }\n    requestAnimationFrame(() => {\n      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n        setTranslate2();\n        requireUpdateOnVirtual = false;\n      }\n    });\n  });\n}\nfunction effectTarget(effectParams, $slideEl) {\n  if (effectParams.transformEl) {\n    return $slideEl.find(effectParams.transformEl).css({\n      \"backface-visibility\": \"hidden\",\n      \"-webkit-backface-visibility\": \"hidden\"\n    });\n  }\n  return $slideEl;\n}\nfunction effectVirtualTransitionEnd({\n  swiper,\n  duration,\n  transformEl,\n  allSlides\n}) {\n  const {\n    slides,\n    activeIndex,\n    $wrapperEl\n  } = swiper;\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let $transitionEndTarget;\n    if (allSlides) {\n      $transitionEndTarget = transformEl ? slides.find(transformEl) : slides;\n    } else {\n      $transitionEndTarget = transformEl ? slides.eq(activeIndex).find(transformEl) : slides.eq(activeIndex);\n    }\n    $transitionEndTarget.transitionEnd(() => {\n      if (eventTriggered)\n        return;\n      if (!swiper || swiper.destroyed)\n        return;\n      eventTriggered = true;\n      swiper.animating = false;\n      const triggerEvents = [\"webkitTransitionEnd\", \"transitionend\"];\n      for (let i = 0; i < triggerEvents.length; i += 1) {\n        $wrapperEl.trigger(triggerEvents[i]);\n      }\n    });\n  }\n}\nfunction EffectFade({\n  swiper,\n  extendParams,\n  on: on2\n}) {\n  extendParams({\n    fadeEffect: {\n      crossFade: false,\n      transformEl: null\n    }\n  });\n  const setTranslate2 = () => {\n    const {\n      slides\n    } = swiper;\n    const params = swiper.params.fadeEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const $slideEl = swiper.slides.eq(i);\n      const offset2 = $slideEl[0].swiperSlideOffset;\n      let tx = -offset2;\n      if (!swiper.params.virtualTranslate)\n        tx -= swiper.translate;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      }\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n      const $targetEl = effectTarget(params, $slideEl);\n      $targetEl.css({\n        opacity: slideOpacity\n      }).transform(`translate3d(${tx}px, ${ty}px, 0px)`);\n    }\n  };\n  const setTransition2 = (duration) => {\n    const {\n      transformEl\n    } = swiper.params.fadeEffect;\n    const $transitionElements = transformEl ? swiper.slides.find(transformEl) : swiper.slides;\n    $transitionElements.transition(duration);\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformEl,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: \"fade\",\n    swiper,\n    on: on2,\n    setTranslate: setTranslate2,\n    setTransition: setTransition2,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}\nclass InitSlider {\n  constructor(props) {\n    __publicField(this, \"classSlider\", \"\");\n    __publicField(this, \"settingsSlider\", {});\n    __publicField(this, \"slider\", null);\n    this.classSlider = props.classSlider;\n    this.settingsSlider = props.settingsSlider;\n    this.checkSlider();\n    if (this.settingsSlider.destroySize) {\n      this.checkResizeSlider();\n    }\n  }\n  checkSlider() {\n    if (window.matchMedia(this.settingsSlider.destroySize).matches && this.settingsSlider.destroySize) {\n      if (this.slider) {\n        try {\n          this.destroySlider();\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      return 1;\n    } else {\n      if (!this.slider) {\n        this.initSlider();\n      }\n    }\n  }\n  checkResizeSlider() {\n    window.addEventListener(\"resize\", () => {\n      this.checkSlider();\n    });\n  }\n  initSlider() {\n    this.slider = new Swiper(this.classSlider, this.settingsSlider) || null;\n  }\n  destroySlider() {\n    var _a, _b;\n    this.slider.destroy();\n    this.slider = null;\n    (_a = document.querySelectorAll(`${this.classSlider}__slider`)) == null ? void 0 : _a.forEach((i) => {\n      i.removeAttribute(\"style\");\n    });\n    (_b = document.querySelector(`${this.classSlider}__wrapper`)) == null ? void 0 : _b.removeAttribute(\"style\");\n  }\n}\nconst listSliders = [\n  {\n    classSlider: \".tmpl-hh-header__slider\",\n    settingsSlider: {\n      modules: [Autoplay, EffectFade],\n      direction: \"horizontal\",\n      slidesPerView: \"auto\",\n      speed: 1500,\n      autoplay: {\n        delay: 5e3\n      },\n      effect: \"fade\",\n      fadeEffect: {\n        crossFade: true\n      }\n    }\n  }\n];\nconst initSliders = () => {\n  listSliders.map((i) => {\n    new InitSlider(i);\n  });\n};\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  window.addEventListener(\"load\", () => {\n    initSliders();\n  });\n});\n\n//\n</script>\n\n\n<div class=\"tmpl-hh-wrapper\">\n    <div class=\"tmpl-hh-header\">\n        <div class=\"tmpl-hh-header__slider swiper\">\n            <div class=\"tmpl-hh-header__wrapper swiper-wrapper\">\n                <div class=\"tmpl-hh-header__slide swiper-slide\">\n                    <picture>\n                        <source media=\"(max-width: 699px)\" srcset=\"https://hhcdn.ru/ichameleon/273245.jpeg\"></source>\n                        <img class=\"tmpl-hh-header__image\" src=\"https://hhcdn.ru/ichameleon/273244.jpeg\" alt=\"\">\n                    </picture>\n                    <span class=\"tmpl-hh-header__slide-text\">\n                        Находи и воплощай лучшие решения\n                    </span>\n                </div>\n                <div class=\"tmpl-hh-header__slide swiper-slide\">\n                    <picture>\n                        <source media=\"(max-width: 699px)\" srcset=\"https://hhcdn.ru/ichameleon/273248.jpeg\"></source>\n                        <img class=\"tmpl-hh-header__image\" src=\"https://hhcdn.ru/ichameleon/273247.jpeg\" alt=\"\">\n                    </picture>\n                    <span class=\"tmpl-hh-header__slide-text\">\n                        Развивай банк вместе с нами\n                    </span>\n                </div>\n                <div class=\"tmpl-hh-header__slide swiper-slide\">\n                    <picture>\n                        <source media=\"(max-width: 699px)\" srcset=\"https://hhcdn.ru/ichameleon/273249.jpeg\"></source>\n                        <img class=\"tmpl-hh-header__image\" src=\"https://hhcdn.ru/ichameleon/273250.jpeg\" alt=\"\">\n                    </picture>\n                    <span class=\"tmpl-hh-header__slide-text\">\n                        Решай важные задачи вместе с нами\n                    </span>\n                </div>\n            </div>\n    \n            <div class=\"tmpl-hh-header__logo\">\n                <svg viewBox=\"0 0 82 29\" fill=\"none\">\n                    <g clip-path=\"url(#clip0_105_507)\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.58216 0L4.18575 3.79384H23.5369L24.9333 0H5.58216ZM3.48711 5.68989L2.0907 9.48287H21.4418L22.8382 5.68989H3.48711ZM1.39641 11.3798L0 15.1728H19.3511L20.7467 11.3798H1.39641Z\" fill=\"#00AAFF\"></path>\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M41.1394 16.6185V16.6985C42.0237 17.0205 42.8685 17.5835 43.3111 17.945C44.6785 19.0709 45.2822 20.5584 45.2822 22.4883C45.2822 25.6656 43.5927 27.9571 40.8173 28.681C39.9725 28.922 39.0882 29.003 37.4383 29.003H29.033V5.76282H36.4739C38.0023 5.76282 39.0477 5.84286 39.9725 6.08389C42.6678 6.80783 44.4374 8.65772 44.4374 11.5922C44.4374 13.1606 43.8743 14.488 42.9494 15.372C42.5473 15.774 41.9841 16.257 41.1394 16.6185ZM33.6985 19.0709V25.1827H36.9165C37.8809 25.1827 38.7661 25.1026 39.4103 24.4992C40.0535 23.8958 40.3351 23.1322 40.3351 22.1268C40.3351 21.3633 40.1336 20.6393 39.7314 20.1168C39.0477 19.2724 38.203 19.0709 36.7554 19.0709H33.6985ZM33.658 15.0501H36.2723C37.0766 15.0501 37.4788 15.0501 37.8809 14.9296C38.9676 14.6076 39.6514 13.6435 39.6514 12.3162C39.6514 10.7486 38.9272 10.0643 37.8809 9.7432C37.4383 9.62269 36.9965 9.58223 36.1113 9.58223H33.658V15.0501ZM52.2805 29.003V9.66227H45.5638V5.76282H64.2267L62.8998 9.66227H56.946V29.003H52.2805ZM65.6742 29.003V5.76282H80.798L79.471 9.66227H70.3002V14.8091H74.0408C77.0573 14.8091 78.6263 15.533 79.7122 16.4575C80.5569 17.1815 82.0044 18.7894 82.0044 21.9667C82.0044 25.1026 80.5164 26.8311 79.2695 27.7161C77.822 28.7206 76.2935 29.003 73.1961 29.003H65.6742ZM70.3002 25.1026H73.7997C75.1267 25.1026 75.931 24.7807 76.4942 24.0567C76.7757 23.6952 77.1779 23.0513 77.1779 21.8453C77.1779 20.6393 76.7757 19.7949 75.9715 19.1914C75.4893 18.8299 74.8451 18.6293 73.7593 18.6293H70.3002V25.1026Z\" fill=\"white\"></path>\n                    </g>\n                    <defs>\n                        <clipPath id=\"clip0_105_507\">\n                            <rect width=\"82\" height=\"29\" fill=\"white\"></rect>\n                        </clipPath>\n                    </defs>\n                </svg>\n            </div>\n            <div class=\"tmpl-hh-header__slogan\">\n                <svg viewBox=\"0 0 139 52\" fill=\"none\">\n                    <path d=\"M1.674 13H5.76C9 13 10.26 11.74 10.26 9.562C10.26 8.014 9.504 6.916 7.578 6.502V6.466C9.198 6.034 9.9 5.008 9.9 3.64C9.9 1.66 8.64 0.399999 5.4 0.399999H1.674V13ZM3.438 11.524V7.258H5.76C7.56 7.258 8.352 8.05 8.352 9.382C8.352 10.732 7.56 11.524 5.76 11.524H3.438ZM3.438 5.782V1.876H5.4C7.326 1.876 8.082 2.632 8.082 3.82C8.082 5.026 7.326 5.782 5.4 5.782H3.438ZM17.7363 13.18C21.3903 13.18 23.6043 10.498 23.6043 6.7C23.6043 2.974 21.4263 0.219999 17.7363 0.219999C14.0823 0.219999 11.8683 2.92 11.8683 6.7C11.8683 10.444 14.0463 13.18 17.7363 13.18ZM17.7363 11.596C15.1623 11.596 13.7403 9.418 13.7403 6.7C13.7403 4.018 15.1623 1.804 17.7363 1.804C20.2743 1.804 21.7323 3.964 21.7323 6.7C21.7323 9.364 20.3283 11.596 17.7363 11.596ZM28.9683 13.18C31.7943 13.18 33.4863 11.56 33.4863 9.472C33.4863 8.014 32.7303 6.952 30.8943 6.484V6.466C32.4063 5.872 33.1263 4.864 33.1263 3.532C33.1263 1.552 31.6503 0.219999 28.6263 0.219999C26.9163 0.219999 25.5123 0.85 25.5123 0.85V2.542C25.5123 2.542 26.9523 1.804 28.6263 1.804C30.4803 1.804 31.2543 2.524 31.2543 3.784C31.2543 4.99 30.4803 5.782 28.6263 5.782H27.4923V7.258H28.9863C30.8043 7.258 31.6143 8.104 31.6143 9.436C31.6143 10.858 30.7863 11.596 28.9863 11.596C26.7543 11.596 25.1523 10.768 25.1523 10.768V12.46C25.1523 12.46 26.7003 13.18 28.9683 13.18ZM35.881 13H37.645V2.128H37.699L41.227 9.4H42.667L46.195 2.128H46.249V13H48.013V0.399999H45.241L41.983 7.33L38.743 0.399999H35.881V13ZM56.4434 13.18C60.0974 13.18 62.3114 10.498 62.3114 6.7C62.3114 2.974 60.1334 0.219999 56.4434 0.219999C52.7894 0.219999 50.5754 2.92 50.5754 6.7C50.5754 10.444 52.7534 13.18 56.4434 13.18ZM56.4434 11.596C53.8694 11.596 52.4474 9.418 52.4474 6.7C52.4474 4.018 53.8694 1.804 56.4434 1.804C58.9814 1.804 60.4394 3.964 60.4394 6.7C60.4394 9.364 59.0354 11.596 56.4434 11.596ZM77.0188 13H79.2148L74.6428 6.358L78.8008 0.399999H76.6228L73.1308 5.584H71.7268V0.399999H69.9628V5.584H68.5408L65.0668 0.399999H62.8888L67.0288 6.358L62.4748 13H64.6708L68.5408 7.168H69.9628V13H71.7268V7.168H73.1308L77.0188 13ZM80.9865 13H82.7505V7.258H88.8345V13H90.5985V0.399999H88.8345V5.674H82.7505V0.399999H80.9865V13ZM99.0176 13.18C102.672 13.18 104.886 10.498 104.886 6.7C104.886 2.974 102.708 0.219999 99.0176 0.219999C95.3636 0.219999 93.1496 2.92 93.1496 6.7C93.1496 10.444 95.3276 13.18 99.0176 13.18ZM99.0176 11.596C96.4436 11.596 95.0216 9.418 95.0216 6.7C95.0216 4.018 96.4436 1.804 99.0176 1.804C101.556 1.804 103.014 3.964 103.014 6.7C103.014 9.364 101.61 11.596 99.0176 11.596ZM113.238 13.18C114.93 13.18 116.226 12.766 116.226 12.766V11.038C116.226 11.038 114.93 11.596 113.238 11.596C110.358 11.596 108.522 9.724 108.522 6.7C108.522 3.676 110.358 1.804 113.238 1.804C114.93 1.804 116.226 2.452 116.226 2.452V0.723999C116.226 0.723999 114.93 0.219999 113.238 0.219999C109.224 0.219999 106.65 2.848 106.65 6.7C106.65 10.642 109.134 13.18 113.238 13.18ZM121.263 13H123.027V1.984H126.879V0.399999H117.411V1.984H121.263V13ZM128.852 13H131.084L136.448 3.748L137.06 2.686H137.096L137.06 3.946V13H138.824V0.399999H136.592L131.3 9.508L130.616 10.678H130.58L130.616 9.598V0.399999H128.852V13ZM4.158 31H5.922V19.984H9.774V18.4H0.306V19.984H4.158V31ZM11.7463 31H15.8323C19.0723 31 20.3323 29.74 20.3323 27.562C20.3323 26.014 19.5763 24.916 17.6503 24.502V24.466C19.2703 24.034 19.9723 23.008 19.9723 21.64C19.9723 19.66 18.7123 18.4 15.4723 18.4H11.7463V31ZM13.5103 29.524V25.258H15.8323C17.6323 25.258 18.4243 26.05 18.4243 27.382C18.4243 28.732 17.6323 29.524 15.8323 29.524H13.5103ZM13.5103 23.782V19.876H15.4723C17.3983 19.876 18.1543 20.632 18.1543 21.82C18.1543 23.026 17.3983 23.782 15.4723 23.782H13.5103ZM27.8086 31.18C31.4626 31.18 33.6766 28.498 33.6766 24.7C33.6766 20.974 31.4986 18.22 27.8086 18.22C24.1546 18.22 21.9406 20.92 21.9406 24.7C21.9406 28.444 24.1186 31.18 27.8086 31.18ZM27.8086 29.596C25.2346 29.596 23.8126 27.418 23.8126 24.7C23.8126 22.018 25.2346 19.804 27.8086 19.804C30.3466 19.804 31.8046 21.964 31.8046 24.7C31.8046 27.364 30.4006 29.596 27.8086 29.596ZM36.2326 31H43.3066V29.416H37.9966V25.258H42.9466V23.674H37.9966V19.984H43.3066V18.4H36.2326V31ZM45.9533 31H47.7173V19.984H53.0093V18.4H45.9533V31ZM60.0293 31.18C63.6833 31.18 65.8973 28.498 65.8973 24.7C65.8973 20.974 63.7193 18.22 60.0293 18.22C56.3753 18.22 54.1613 20.92 54.1613 24.7C54.1613 28.444 56.3393 31.18 60.0293 31.18ZM60.0293 29.596C57.4553 29.596 56.0333 27.418 56.0333 24.7C56.0333 22.018 57.4553 19.804 60.0293 19.804C62.5673 19.804 64.0253 21.964 64.0253 24.7C64.0253 27.364 62.6213 29.596 60.0293 29.596ZM1.674 49H5.598C8.82 49 10.26 47.506 10.26 45.112C10.26 42.682 8.82 41.188 5.778 41.188H3.438V37.984H9.27V36.4H1.674V49ZM3.438 47.416V42.772H5.778C7.56 42.772 8.388 43.636 8.388 45.112C8.388 46.57 7.56 47.416 5.598 47.416H3.438ZM13.0044 47.452V48.964C13.3104 49.072 13.6884 49.18 14.2464 49.18C15.7044 49.18 16.4064 48.388 17.2884 46.462L21.8424 36.4H20.0064L16.5684 44.176H16.4784L13.0044 36.4H11.1144L15.7044 46.192C15.3264 47.254 14.7684 47.686 14.0484 47.686C13.7244 47.686 13.3824 47.596 13.0044 47.452ZM21.0808 51.808H22.8448V49H31.8988V51.808H33.6628V47.416H32.2408V36.4H23.7988V39.622C23.7988 43.06 23.6188 45.346 22.2868 47.416H21.0808V51.808ZM25.4728 38.668V37.984H30.4768V47.416H24.0688C25.4368 45.454 25.4728 41.368 25.4728 38.668ZM36.2251 47.452V48.964C36.5311 49.072 36.9091 49.18 37.4671 49.18C38.9251 49.18 39.6271 48.388 40.5091 46.462L45.0631 36.4H43.2271L39.7891 44.176H39.6991L36.2251 36.4H34.3351L38.9251 46.192C38.5471 47.254 37.9891 47.686 37.2691 47.686C36.9451 47.686 36.6031 47.596 36.2251 47.452ZM46.6916 49H60.4436V51.808H62.2076V47.416H60.6956V36.4H58.9316V47.416H54.5756V36.4H52.8116V47.416H48.4556V36.4H46.6916V49ZM64.5158 49H71.5898V47.416H66.2798V43.258H71.2298V41.674H66.2798V37.984H71.5898V36.4H64.5158V49ZM74.2365 49H76.0005V37.984H81.2925V36.4H74.2365V49ZM88.3125 49.18C91.9665 49.18 94.1805 46.498 94.1805 42.7C94.1805 38.974 92.0025 36.22 88.3125 36.22C84.6585 36.22 82.4445 38.92 82.4445 42.7C82.4445 46.444 84.6225 49.18 88.3125 49.18ZM88.3125 47.596C85.7385 47.596 84.3165 45.418 84.3165 42.7C84.3165 40.018 85.7385 37.804 88.3125 37.804C90.8505 37.804 92.3085 39.964 92.3085 42.7C92.3085 45.364 90.9045 47.596 88.3125 47.596Z\" fill=\"white\"></path>\n                </svg>\n            </div>\n        </div>\n    </div>    <div class=\"tmpl-hh-content\">\n        <strong>Обязанности:</strong> <ul> <li>анализ, проектирование и создание витрин данных в соответствии с требованиями конкретного проекта</li> <li>извлечение, очистка, загрузка и трансформация больших объемов данных из различных источников (тeradata, hadoop, плоские файлы), а также подготовка требований для разработки промышленных ETL-процессов</li> <li>контроль качества загружаемых данных, разработка автоматизированных инструментов для оценки качества данных</li> <li>анализ исходных данных в различных СУБД (тeradata, hadoop, postgresql) и форматах данных для решения бизнес-задач (оценка структуры, качества, полноты и применимости данных)</li> <li>совместно с DS и DA внедрение математических алгоритмов и ML-моделей в промышленные процессы</li> <li>предоставление экспертной поддержки внутренним потребителям (DS, DA) по вопросам, связанным с использованием данных.</li> </ul> <strong>Требования:</strong> <ul> <li>уверенное знание SQL: сложные запросы, аналитически функции, понимание физической реализации join’ов, оптимизация производительности запросов, хранимые процедуры и функции;</li> <li>знание Python на уровне переменных, процедур, функций, циклов, условных операторов;</li> <li>понимание ETL/ELT процессов, опыт работы с ETL-инструментами;</li> <li>понимание принципов организации хранилищ данных, подходов к проектированию логической и физической моделей, понимание основной проблематики хранилищ и подходов к решению;</li> <li>Jira, Confluence;</li> <li>развитые коммуникативные навыки, желание развиваться в области работы с данными;</li> <li>высшее, техническое либо финансовое образование.</li> </ul> <strong>Условия:</strong> <ul> <li>трудоустройство согласно Законодательству;</li> <li>конкурентная заработная плата;</li> <li>профессиональное обучение и развитие;</li> <li>добровольное медицинское страхование, льготные условия кредитования;</li> <li>корпоративная пенсионная программа, материальная помощь;</li> <li>спортивная жизнь и корпоративные мероприятия;</li> <li>возможность построить карьеру в ведущем банке России.</li> </ul></div>    <div class=\"tmpl-hh-footer\">\n    \n    </div>    \n</div>\n\n","vacancy_constructor_template":null,"key_skills":[{"name":"Python"},{"name":"SQL"},{"name":"ETL"},{"name":"Аналитическое мышление"},{"name":"Умение работать в условиях многозадачности"}],"accept_handicapped":false,"accept_kids":false,"archived":false,"response_url":null,"specializations":[],"professional_roles":[{"id":"40","name":"Другое"}],"code":null,"hidden":false,"quick_responses_allowed":false,"driver_license_types":[],"accept_incomplete_resumes":false,"employer":{"id":"4181","name":"Банк ВТБ (ПАО)","url":"https://api.hh.ru/employers/4181?host=hh.ru","alternate_url":"https://hh.ru/employer/4181","logo_urls":{"240":"https://hhcdn.ru/employer-logo/2369889.png","90":"https://hhcdn.ru/employer-logo/2369888.png","original":"https://hhcdn.ru/employer-logo-original/482009.png"},"vacancies_url":"https://api.hh.ru/vacancies?employer_id=4181&host=hh.ru","trusted":true},"published_at":"2023-03-14T16:49:01+0300","created_at":"2023-03-14T16:49:01+0300","initial_created_at":"2023-02-14T13:40:50+0300","negotiations_url":null,"suitable_resumes_url":null,"apply_alternate_url":"https://hh.ru/applicant/vacancy_response?vacancyId=76970692","has_test":false,"test":null,"alternate_url":"https://hh.ru/vacancy/76970692","working_days":[],"working_time_intervals":[],"working_time_modes":[],"accept_temporary":false,"languages":[]}